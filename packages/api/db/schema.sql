-- --------------------------------------------------
-- 1. ROLES and PERMISSIONS Tables
-- --------------------------------------------------

CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL
);
COMMENT ON TABLE roles IS 'Stores user roles, e.g., admin, staff, client.';

CREATE TABLE permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    description TEXT,
    module TEXT NOT NULL -- e.g., 'portfolio', 'blog', 'users'
);
COMMENT ON TABLE permissions IS 'Stores granular permissions for different modules.';

CREATE TABLE role_permissions (
    role_id BIGINT REFERENCES roles(id) ON DELETE CASCADE,
    permission_id BIGINT REFERENCES permissions(id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, permission_id)
);
COMMENT ON TABLE role_permissions IS 'Maps permissions to roles.';


-- Insert default roles
INSERT INTO roles (name) VALUES ('admin'), ('staff'), ('client');

-- Insert default permissions
INSERT INTO permissions (name, description, module) VALUES
-- Portfolio
('portfolio.create', 'Can create new portfolio items', 'Portfolio'),
('portfolio.read', 'Can view portfolio items', 'Portfolio'),
('portfolio.update', 'Can edit portfolio items', 'Portfolio'),
('portfolio.delete', 'Can delete portfolio items', 'Portfolio'),
-- Blog
('blog.create', 'Can create new blog posts', 'Blog'),
('blog.read', 'Can view blog posts', 'Blog'),
('blog.update', 'Can edit blog posts', 'Blog'),
('blog.delete', 'Can delete blog posts', 'Blog'),
-- Orders
('orders.create', 'Can create new orders', 'Orders'),
('orders.read', 'Can view all orders', 'Orders'),
('orders.update', 'Can edit orders', 'Orders'),
('orders.delete', 'Can delete orders', 'Orders'),
-- Inbox (Messages)
('inbox.read', 'Can read messages', 'Inbox'),
('inbox.update', 'Can change message status', 'Inbox'),
('inbox.delete', 'Can delete messages', 'Inbox'),
-- Users
('users.invite', 'Can invite new users', 'Users'),
('users.read', 'Can view all users', 'Users'),
('users.update', 'Can edit user profiles and roles', 'Users'),
('users.delete', 'Can delete users', 'Users'),
-- Settings
('settings.read', 'Can view site settings', 'Settings'),
('settings.update', 'Can change site settings', 'Settings'),
-- Permissions
('permissions.manage', 'Can manage roles and their permissions', 'Permissions');


-- Assign all permissions to the 'admin' role
INSERT INTO role_permissions (role_id, permission_id)
SELECT
    (SELECT id FROM roles WHERE name = 'admin'),
    p.id
FROM permissions p;

-- Assign a subset of permissions to the 'staff' role
INSERT INTO role_permissions (role_id, permission_id)
SELECT
    (SELECT id FROM roles WHERE name = 'staff'),
    p.id
FROM permissions p
WHERE p.name IN (
    'portfolio.create', 'portfolio.read', 'portfolio.update', 'portfolio.delete',
    'blog.create', 'blog.read', 'blog.update', 'blog.delete',
    'orders.read', 'orders.update',
    'inbox.read', 'inbox.update', 'inbox.delete',
    'users.read'
);

-- Assign permissions to the 'client' role
INSERT INTO role_permissions (role_id, permission_id)
SELECT
    (SELECT id FROM roles WHERE name = 'client'),
    p.id
FROM permissions p
WHERE p.name IN ('orders.read', 'orders.update'); -- For their own orders, checked via RLS


-- --------------------------------------------------
-- 2. USERS Table & related tables
-- --------------------------------------------------
CREATE TABLE users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name TEXT,
    avatar_url TEXT,
    role_id BIGINT REFERENCES roles(id) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE clients (
    id UUID PRIMARY KEY REFERENCES public.users(id) ON DELETE CASCADE,
    company_name TEXT,
    website TEXT,
    phone_number TEXT,
    address TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ... (rest of the tables: portfolios, blogs, messages, orders, etc. remain the same)
-- The structure of these content tables does not need to change.
CREATE TABLE portfolio_categories (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT UNIQUE NOT NULL);
CREATE TABLE portfolios (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, title TEXT NOT NULL, description JSONB, tags TEXT[], images_urls TEXT[], video_url TEXT, live_link TEXT, github_link TEXT, status TEXT NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'published')), category_id BIGINT REFERENCES portfolio_categories(id), meta_title TEXT, meta_description TEXT, meta_keywords TEXT, og_image_url TEXT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW());
CREATE TABLE blog_categories (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT UNIQUE NOT NULL);
CREATE TABLE blog_tags (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT UNIQUE NOT NULL);
CREATE TABLE blogs (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, title TEXT NOT NULL, content JSONB, featured_image_url TEXT, status TEXT NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'scheduled')), published_at TIMESTAMPTZ, category_id BIGINT REFERENCES blog_categories(id), author_id UUID REFERENCES users(id), meta_title TEXT, meta_description TEXT, meta_keywords TEXT, og_image_url TEXT, created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW());
CREATE TABLE blog_post_tags (post_id BIGINT REFERENCES blogs(id) ON DELETE CASCADE, tag_id BIGINT REFERENCES blog_tags(id) ON DELETE CASCADE, PRIMARY KEY (post_id, tag_id));
CREATE TABLE messages (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT NOT NULL, email TEXT NOT NULL, subject TEXT, body TEXT NOT NULL, status TEXT NOT NULL DEFAULT 'unread' CHECK (status IN ('unread', 'read', 'archived')), created_at TIMESTAMPTZ DEFAULT NOW());
CREATE TABLE orders (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, project_name TEXT NOT NULL, client_id UUID REFERENCES clients(id) NOT NULL, project_type TEXT, status TEXT NOT NULL DEFAULT 'Pending', budget NUMERIC(10, 2), start_date TIMESTAMPTZ, deadline_date TIMESTAMPTZ, brief TEXT, requirements JSONB, attached_files_urls TEXT[], created_at TIMESTAMPTZ DEFAULT NOW(), updated_at TIMESTAMPTZ DEFAULT NOW());
CREATE TABLE order_updates (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, order_id BIGINT REFERENCES orders(id) ON DELETE CASCADE NOT NULL, author_id UUID REFERENCES users(id) NOT NULL, update_type TEXT NOT NULL DEFAULT 'Comment', content TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT NOW());
CREATE TABLE settings (key TEXT PRIMARY KEY, value JSONB, description TEXT);
CREATE TABLE media_files (id UUID PRIMARY KEY DEFAULT extensions.uuid_generate_v4(), file_name TEXT NOT NULL, storage_path TEXT NOT NULL UNIQUE, mime_type TEXT, file_size BIGINT, uploader_id UUID REFERENCES users(id), created_at TIMESTAMPTZ DEFAULT NOW());

-- New tables for Skills, Education, and Experience
CREATE TABLE skill_categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    icon_name TEXT, -- e.g., 'Code2', 'Database' from lucide-react
    color_class TEXT -- e.g., 'text-blue-400'
);

CREATE TABLE skills (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    icon_name TEXT, -- e.g., 'FaReact', 'SiNextdotjs'
    icon_color_class TEXT, -- e.g., 'text-[#61DAFB]'
    category_id BIGINT REFERENCES skill_categories(id) ON DELETE CASCADE
);

CREATE TABLE education (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    institution TEXT NOT NULL,
    degree TEXT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE,
    description TEXT
);

CREATE TABLE experience (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company TEXT NOT NULL,
    job_title TEXT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE,
    description TEXT
);


-- Insert sample data for skills
INSERT INTO skill_categories (name, icon_name, color_class) VALUES
('Frontend Development', 'Code2', 'text-blue-400'),
('Backend Development', 'Database', 'text-green-400'),
('UI/UX Design', 'Layout', 'text-purple-400'),
('Cloud & DevOps', 'Cloud', 'text-orange-400'),
('Tools & Technologies', 'Cpu', 'text-pink-400'),
('Creative Skills', 'Paintbrush', 'text-yellow-400');

INSERT INTO skills (name, icon_name, icon_color_class, category_id) VALUES
-- Frontend
('React', 'FaReact', 'text-[#61DAFB]', (SELECT id FROM skill_categories WHERE name = 'Frontend Development')),
('Next.js', 'SiNextdotjs', 'text-white', (SELECT id FROM skill_categories WHERE name = 'Frontend Development')),
('TypeScript', 'SiTypescript', 'text-[#3178C6]', (SELECT id FROM skill_categories WHERE name = 'Frontend Development')),
('Tailwind CSS', 'SiTailwindcss', 'text-[#38B2AC]', (SELECT id FROM skill_categories WHERE name = 'Frontend Development')),
-- Backend
('Node.js', 'FaNodeJs', 'text-[#339933]', (SELECT id FROM skill_categories WHERE name = 'Backend Development')),
('Python', 'FaPython', 'text-[#3776AB]', (SELECT id FROM skill_categories WHERE name = 'Backend Development')),
('PostgreSQL', 'SiPostgresql', 'text-[#336791]', (SELECT id FROM skill_categories WHERE name = 'Backend Development')),
-- UI/UX
('Figma', 'FaFigma', 'text-[#F24E1E]', (SELECT id FROM skill_categories WHERE name = 'UI/UX Design')),
-- DevOps
('Docker', 'FaDocker', 'text-[#2496ED]', (SELECT id FROM skill_categories WHERE name = 'Cloud & DevOps')),
('Git', 'FaGitAlt', 'text-[#F05032]', (SELECT id FROM skill_categories WHERE name = 'Cloud & DevOps'));

-- Insert sample data for Education and Experience
INSERT INTO education (institution, degree, start_date, end_date, description) VALUES
('University of Example', 'B.Sc. in Computer Science', '2018-01-01', '2022-01-01', 'Focused on software development and AI.'),
('Online Course Platform', 'Full Stack Web Development Certificate', '2022-02-01', '2022-08-01', 'Completed an intensive bootcamp covering MERN stack.');

INSERT INTO experience (company, job_title, start_date, end_date, description) VALUES
('Tech Solutions Inc.', 'Software Engineer', '2022-09-01', NULL, 'Developing and maintaining web applications using React and Node.js.'),
('Creative Agency', 'Frontend Developer Intern', '2021-06-01', '2021-08-31', 'Assisted in building responsive user interfaces for client websites.');


-- --------------------------------------------------
-- 3. HELPER FUNCTIONS & TRIGGERS
-- --------------------------------------------------

-- Function to get user role ID
CREATE OR REPLACE FUNCTION get_user_role_id(user_id UUID)
RETURNS BIGINT AS $$
DECLARE
  role_id_result BIGINT;
BEGIN
  SELECT role_id INTO role_id_result FROM public.users WHERE id = user_id;
  RETURN role_id_result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- RPC function to check permissions
CREATE OR REPLACE FUNCTION check_permission(permission_name TEXT)
RETURNS BOOLEAN AS $$
DECLARE
  user_role_id BIGINT;
  has_permission BOOLEAN;
BEGIN
  user_role_id := get_user_role_id(auth.uid());
  
  -- Admins bypass the check and always have permission
  IF (SELECT name FROM roles WHERE id = user_role_id) = 'admin' THEN
    RETURN TRUE;
  END IF;

  SELECT EXISTS (
    SELECT 1
    FROM role_permissions rp
    JOIN permissions p ON rp.permission_id = p.id
    WHERE rp.role_id = user_role_id AND p.name = permission_name
  )
  INTO has_permission;
  
  RETURN has_permission;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- Function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  user_count INT;
  admin_role_id BIGINT;
  client_role_id BIGINT;
  new_user_role_id BIGINT;
BEGIN
  SELECT id INTO admin_role_id FROM roles WHERE name = 'admin';
  SELECT id INTO client_role_id FROM roles WHERE name = 'client';
  SELECT count(*) INTO user_count FROM auth.users;

  IF user_count = 1 THEN
    new_user_role_id := admin_role_id;
  ELSE
    new_user_role_id := (SELECT id FROM roles WHERE name = COALESCE(new.raw_user_meta_data->>'role', 'client'));
  END IF;

  INSERT INTO public.users (id, role_id) VALUES (new.id, new_user_role_id);
  
  IF new_user_role_id = client_role_id THEN
    INSERT INTO public.clients (id) VALUES (new.id);
  END IF;

  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- --------------------------------------------------
-- 4. ROW LEVEL SECURITY (RLS) Policies
-- Now using the check_permission function
-- --------------------------------------------------

-- Enable RLS
ALTER TABLE portfolios ENABLE ROW LEVEL SECURITY;
ALTER TABLE blogs ENABLE ROW LEVEL SECURITY;
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE skills ENABLE ROW LEVEL SECURITY;
ALTER TABLE skill_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE education ENABLE ROW LEVEL SECURITY;
ALTER TABLE experience ENABLE ROW LEVEL SECURITY;


-- Dynamic RLS Policies
CREATE POLICY "Public can read skills and categories" ON skills FOR SELECT USING (true);
CREATE POLICY "Public can read skills and categories" ON skill_categories FOR SELECT USING (true);
CREATE POLICY "Public can read education" ON education FOR SELECT USING (true);
CREATE POLICY "Public can read experience" ON experience FOR SELECT USING (true);


-- Portfolio
CREATE POLICY "Portfolio access based on permissions" ON portfolios
  FOR ALL USING (check_permission(
    CASE 
      WHEN (SELECT current_setting('request.method')) = 'POST' THEN 'portfolio.create'
      WHEN (SELECT current_setting('request.method')) = 'PATCH' THEN 'portfolio.update'
      WHEN (SELECT current_setting('request.method')) = 'DELETE' THEN 'portfolio.delete'
      ELSE 'portfolio.read'
    END
  ));

-- Blog
CREATE POLICY "Blog access based on permissions" ON blogs
  FOR ALL USING (check_permission(
    CASE 
      WHEN (SELECT current_setting('request.method')) = 'POST' THEN 'blog.create'
      WHEN (SELECT current_setting('request.method')) = 'PATCH' THEN 'blog.update'
      WHEN (SELECT current_setting('request.method')) = 'DELETE' THEN 'blog.delete'
      ELSE 'blog.read'
    END
  ));

-- Orders
CREATE POLICY "Orders access for staff" ON orders
  FOR ALL USING (check_permission(
    CASE 
      WHEN (SELECT current_setting('request.method')) = 'POST' THEN 'orders.create'
      WHEN (SELECT current_setting('request.method')) = 'PATCH' THEN 'orders.update'
      WHEN (SELECT current_setting('request.method')) = 'DELETE' THEN 'orders.delete'
      ELSE 'orders.read'
    END
  ));
CREATE POLICY "Clients can see their own orders" ON orders
  FOR SELECT USING (client_id = auth.uid());
  
-- Users
CREATE POLICY "Users access based on permissions" ON users
  FOR ALL USING (check_permission(
    CASE 
      WHEN (SELECT current_setting('request.method')) = 'PATCH' THEN 'users.update'
      WHEN (SELECT current_setting('request.method')) = 'DELETE' THEN 'users.delete'
      ELSE 'users.read'
    END
  ));
CREATE POLICY "Users can view and edit their own profile" ON users
  FOR ALL USING (id = auth.uid());


-- Settings
CREATE POLICY "Settings access based on permissions" ON settings
  FOR ALL USING (check_permission(
    CASE 
      WHEN (SELECT current_setting('request.method')) = 'PATCH' THEN 'settings.update'
      ELSE 'settings.read'
    END
  ));

-- Other tables like `messages` would follow the same pattern
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Messages access based on permissions" ON messages
  FOR ALL USING (check_permission('inbox.read')); -- Simplified for example

-- --------------------------------------------------
-- 5. OTHER RPC FUNCTIONS
-- --------------------------------------------------

CREATE OR REPLACE FUNCTION get_skills_with_categories()
RETURNS JSONB AS $$
DECLARE
    result JSONB;
BEGIN
    SELECT jsonb_agg(
        jsonb_build_object(
            'id', sc.id,
            'name', sc.name,
            'icon_name', sc.icon_name,
            'color_class', sc.color_class,
            'skills', (
                SELECT jsonb_agg(
                    jsonb_build_object(
                        'id', s.id,
                        'name', s.name,
                        'icon_name', s.icon_name,
                        'icon_color_class', s.icon_color_class
                    )
                )
                FROM skills s
                WHERE s.category_id = sc.id
            )
        )
    )
    INTO result
    FROM skill_categories sc;

    RETURN result;
END;
$$ LANGUAGE plpgsql;

-- (get_daily_user_signups and delete_user remain the same)
CREATE OR REPLACE FUNCTION get_daily_user_signups(days_limit INT) RETURNS TABLE(signup_date DATE, count BIGINT) AS $$ BEGIN RETURN QUERY SELECT DATE(u.created_at) AS signup_date, COUNT(u.id) AS count FROM public.users u WHERE u.created_at >= NOW() - (days_limit || ' days')::INTERVAL GROUP BY DATE(u.created_at) ORDER BY signup_date ASC; END; $$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION delete_user(user_id_to_delete UUID) RETURNS VOID AS $$ BEGIN IF NOT check_permission('users.delete') THEN RAISE EXCEPTION 'You do not have permission to delete users.'; END IF; DELETE FROM auth.users WHERE id = user_id_to_delete; END; $$ LANGUAGE plpgsql SECURITY DEFINER;
